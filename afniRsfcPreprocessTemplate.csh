#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Aug 17 11:17:08 2016"
echo "(version 4.73, July 23, 2016)"
echo "execution started: `date`"

# execute via : 
#   tcsh -xef 105_A.test-afniRsfcPreprocess.csh |& tee output.105_A.test-afniRsfcPreprocess.csh

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 28 Oct 2015
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 28 Oct 2015)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    echo "No Subject ID provided."
    exit
endif

# assign output directory name
set output_dir = afniRsfcPreprocessed


# set list of runs
set runs = (`count -digits 2 1 1`)

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -overwrite -infile dfile_rall.1D -set_nruns 1                            \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -overwrite -infile dfile_rall.1D -set_nruns 1                            \
           -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -overwrite -infile dfile_rall.1D -set_nruns 1                            \
    -show_censor_count -censor_prev_TR                                   \
    -censor_first_trs 3                                                  \
    -censor_motion 0.25 motion_${subj}

# create bandpass regressors (instead of using 3dBandpass, say)
1dBport -nodata 256 2.0 -band 0.01 0.1 -invert -nozero > bandpass_rall.1D

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D                  \
                       -show_trs_uncensored encoded`
if ( -f X.xmat.1D ) then
    rm -f *xmat.1D X.jpg
endif
# ------------------------------
# run the regression analysis
3dDeconvolve -input pb04.$subj.r*.blur+tlrc.HEAD                         \
    -mask mask_group+tlrc                                                \
    -censor motion_${subj}_censor.1D                                     \
    -ortvec bandpass_rall.1D bandpass                                    \
    -polort 4                                                            \
    -num_stimts 6                                                        \
    -stim_file 1 motion_demean.1D'[0]' -stim_base 1 -stim_label 1 roll   \
    -stim_file 2 motion_demean.1D'[1]' -stim_base 2 -stim_label 2 pitch  \
    -stim_file 3 motion_demean.1D'[2]' -stim_base 3 -stim_label 3 yaw    \
    -stim_file 4 motion_demean.1D'[3]' -stim_base 4 -stim_label 4 dS     \
    -stim_file 5 motion_demean.1D'[4]' -stim_base 5 -stim_label 5 dL     \
    -stim_file 6 motion_demean.1D'[5]' -stim_base 6 -stim_label 6 dP     \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                              \
    -x1D_uncensored X.nocensor.xmat.1D                                   \
    -fitts fitts.$subj                                                   \
    -errts errts.${subj}                                                 \
    -x1D_stop                                                            \
    -bucket stats.$subj

# -- use 3dTproject to project out regression matrix --
3dTproject -polort 0 -input pb04.$subj.r*.blur+tlrc.HEAD                 \
           -mask mask_group+tlrc                                         \
           -censor motion_${subj}_censor.1D -cenmode ZERO                \
           -ort X.nocensor.xmat.1D -prefix errts.${subj}.tproject



# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r*.blur+tlrc.HEAD

# --------------------------------------------------
# generate ANATICOR result: errts.$subj.anaticor+tlrc

# --------------------------------------------------
# ANATICOR: generate local WMe time series averages
# create catenated volreg dataset
if ( ! -f Local_WMe_rall+tlrc.HEAD ) then 
    3dTcat -prefix rm.all_runs.volreg pb03.$subj.r*.volreg+tlrc.HEAD
    3dLocalstat -stat mean -nbhd 'SPHERE(45)' -prefix Local_WMe_rall         \
		-mask mask_WMe_resam+tlrc -use_nonmask                       \
		rm.all_runs.volreg+tlrc
endif
# -- use 3dTproject to project out regression matrix --
3dTproject -polort 0 -input pb04.$subj.r*.blur+tlrc.HEAD                 \
           -mask mask_group+tlrc                                         \
           -censor motion_${subj}_censor.1D -cenmode ZERO                \
           -dsort Local_WMe_rall+tlrc                                    \
           -ort X.nocensor.xmat.1D -prefix errts.$subj.anaticor

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.$subj.anaticor+tlrc"[$ktrs]"
3dcalc -a rm.signal.all+tlrc                                             \
       -b rm.noise.all+tlrc                                              \
       -c mask_group+tlrc                                                \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.$subj.anaticor+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc           \
          > gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: average correlation across masked brain)
# (now just dot product with average unit time series)
3dcalc -a rm.errts.unit+tlrc -b gmean.errts.unit.1D -expr 'a*b' -prefix rm.DP
3dTstat -sum -prefix corr_brain rm.DP+tlrc

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# -- estimate blur for each run in errts --
touch blur.errts.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask mask_group+tlrc                               \
        errts.$subj.anaticor+tlrc"[$trs]" >> blur.errts.1D
end

# compute average blur and append
set blurs = ( `cat blur.errts.1D` )
echo average errts blurs: $blurs
echo "$blurs   # errts blur estimates" >> blur_est.$subj.1D


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.1     \
    -errts_dset errts.$subj.anaticor+tlrc.HEAD -exit0

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -fr rm.* Segsy

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id 105_A -script 105_A.test-afniRsfcPreprocess.csh      \
#     -out_dir afniRsfcPreprocessed -blocks despike tshift align tlrc volreg \
#     mask blur regress -copy_anat                                           \
#     /data/sanDiego/machLearnT1Analysis/data/105_A/105_A.anat+orig.HEAD     \
#     -dsets                                                                 \
#     /data/sanDiego/machLearnT1Analysis/data/105_A/105_A.resting+orig.HEAD  \
#     -tlrc_base MNI_caez_N27+tlrc -volreg_align_to first -volreg_tlrc_warp  \
#     -blur_size 7 -blur_to_fwhm -blur_opts_B2FW '-ACF -rate 0.2 -temper'    \
#     -mask_apply group -mask_segment_anat yes -regress_censor_first_trs 3   \
#     -mask_segment_erode yes -regress_anaticor -regress_bandpass 0.01 0.1   \
#     -regress_apply_mot_types demean -regress_censor_motion 0.1             \
#     -regress_run_clustsim no -regress_est_blur_errts
